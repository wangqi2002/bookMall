#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('ubt:server');
 var http = require('http');
 let server = http.createServer(app);
 const SocketIO = require("socket.io")
 const { handerchartInfo } = require("../services/ChartService")
 const io = SocketIO(server, {
   transports: ['websocket']
 })
 
 
 
 
 /**
  * Get port from environment and store in Express.
  */
 
 var port = normalizePort(process.env.PORT || '4000');
 app.set('port', port);
 
 
 
 /**
  * Create HTTP server.
  */
 
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 let scs = io.sockets.sockets;
 
 io.on('connection', function (socket) {
 
   console.log('客户端有连接')
 
   // 监听客户端断开
   socket.on('disconnect', () => {
     console.log('客户端断开')
   })
   //接收数据
   socket.on('login', function (data) {
     socket.userId = data.userId;
   });
   socket.on('chart', function (data) {
     let bol = 0;
     let person = null;
     // 匹配接收方的id
     scs.forEach((item) => {
       if (item.userId == data.userId) {
         bol = 1;
         person = item.id;
         io.to(item.id).emit(`chart-${data.msg.send_id}`, data.msg)
       }
     });
     // 如果客服中心存在
     scs.forEach((item) => {
       if (item.userId == '客服中心') {
         if(data.msg.msg_send == 0)
         io.to(item.id).emit('chart-客服中心', data.msg)
       }
     });
     // 
     let msg_talker = data.msg.send_id == '客服' ? data.userId : data.msg.send_id;
     let newData = { msg_content:data.msg.msg_content,msg_time:new Date(), source: data.msg.msg_send, msg_talker, status: bol };
     handerchartInfo(newData, function (result) {
       if (result.code == 0) io.to(person).emit(`err-${data.msg.send_id}`, result.value)
     });
   })
 });
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }
 